{"componentChunkName":"component---src-pages-blog-mdx-slug-js","path":"/blog/cleaning-dataset-with-excel/","result":{"data":{"mdx":{"frontmatter":{"title":"Cleaning Dataset with Excel","date":"August 20, 2021"},"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Cleaning Dataset with Excel\",\n  \"date\": \"2021-08-20\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"SQL is of course the sophisticated tool for data cleaning and analysis, but do not underestimate Excel. There are so many cases when the data is not huge and you can easily make your calculations in Excel. Just do it there.\"), mdx(\"p\", null, \"The most important Excel tools for the cleaning process are conditional formatting, remove duplicates, data validation, sorting, and filtering.\"), mdx(\"p\", null, \"The most important functions, in my opinion, are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"IF\"), \" - with it, you can make a logical comparison of value with what you expect, the function returns one value of 2, for example, true or false;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MIN\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MAX\"), \" - return minimum and maximum value in a set of values;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"COUNT\"), \" - counts the number of cells in a set of values with numbers;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"COUNTA\"), \" - counts the number of cells in a set of values that are not empty, so it will count texts as well as numbers;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"COUNTIF\"), \" - counts the number of cells in a set of values if the condition is true;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SUM\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"SUMIF/SUMIFS\"), \" - returns the sum of the values in the selected set of values. With SUMIF/S we can add conditions and it will sum up only values where the condition is true;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"LEN\"), \" - counts the number of characters in the string, it may be valuable to check if the value matches prescribed patterns;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TRIM\"), \" - delete the unwanted spaces in the text, except 1 space between words;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"TRUNC\"), \" - removes the fractional part of the number, if we don\\u2019t need long numbers for further analysis;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"INT\"), \" - rounds the number down, to integer.\\nWorks almost like TRUNC, the difference is only with negative numbers (e.g. TRUNC(-3,4) = -3 and INT(-3,4) = -4);\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"LEFT, RIGHT\"), \", and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"MID\"), \" - returns characters from the text based on the number of specified characters and sides (left, right, or middle);\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"FIND\"), \" - returns the number of the starting position of a specified text string within another text string. It is very helpful to use it together with the LEFT/RIGHT/MID function. So you can simultaneously find the needed string within another string and retrieve the part of it;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"VALUE\"), \" - makes number from string.\\nE.g. when you have the value \\\"$ 1000\\\" and Excel thinks it\\u2019s a string, you can\\u2019t make any calculations with it. After using the VALUE function we will see instead \\\"1000\\\" and calculations are available as it is number now;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CONCAT\"), \" - joins several text strings into one;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"DATE\"), \" - this function helps a lot when working with date values. It can compile the date from 3 different numbers, can make calculations with dates and it changes the text string into the date format;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"ISTEXT\"), \" - to check if the value is text;\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"CONVERT\"), \" - converts the number from one measurement system to other (e.g. miles converts to km);\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"cd5345fa-c2f1-522b-804c-eb6691dee13f","slug":"cleaning-dataset-with-excel","__params":{"slug":"cleaning-dataset-with-excel"}}},"staticQueryHashes":[]}