{"componentChunkName":"component---src-pages-blog-mdx-slug-js","path":"/blog/your-file-name-convention/","result":{"data":{"mdx":{"frontmatter":{"title":"your File Name Convention","date":"July 29, 2021"},"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"your File Name Convention\",\n  \"date\": \"2021-07-29\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I am sure that everyone has had at least one such case when you open your computer and cannot find that \\\"Untitled\\\" file that you need so much right now. And all because the name of the file had no meaning, as a rule, the reason was: it seems clear as it is, I have no time to think about it,  I will rename it later or so on - underline it.\\nIf in real life we can still cope with this, then in data processing it is a serious mistake.\"), mdx(\"p\", null, \"What do we do?\\nThe answer is the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"File Name Convention\"), \". It is a set of rules that we apply when naming a file.\\nIdeally, the rules should be defined and agreed upon by the entire team. This will provide clarity and prevent unnecessary mistakes, when at the end of the day it may turn out that you worked with the wrong set of data.\\nThough file names should be descriptive and you can include any important information in the file name, it is good practice not to exceed 25 characters.\\nTo start with it you can consider using these elements:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"project name (or acronym)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"researcher name (or initials)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"location(if needed)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"condition\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"date in format ISO 8601 (YYYYMMDD) this will make sure that all your files are in chronological order\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the number of versions (with leading zeroes to be sure that files sort in sequential order). Use \\u201Cv001, v002, v003, ...\\u201D instead of \\u201Cv1, v2, v3, ...\\u201D.\")), mdx(\"p\", null, \"The last advices are to avoid special characters like $, %, *,& and separation. Instead it is better to use underscore (sales_data), dashes (sales-data) or camel case (SalesData).\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"e24a8321-1ea5-500d-8180-f7e7a7765beb","slug":"your-file-name-convention","__params":{"slug":"your-file-name-convention"}}},"staticQueryHashes":[]}