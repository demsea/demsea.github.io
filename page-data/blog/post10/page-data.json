{
    "componentChunkName": "component---src-pages-blog-mdx-slug-js",
    "path": "/blog/post10/",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Changelog","date":"September 10, 2021"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Changelog\",\n  \"date\": \"2021-09-10\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Documentation is not what everyone likes, but what almost everyone needs. Especially data analysts.\"), mdx(\"p\", null, \"Working with data implies responsibility for the state of that data, for its reliability, validity, and absence of bias. Data cleaning is a process where you can accidentally delete some of the important information.\"), mdx(\"p\", null, \"Keeping documentation, which will indicate all the steps of working with the data greatly simplifies life. You can always roll back changes, and other users can see exactly what work has been done with the data and what is its\\u2019 quality.\"), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"By the way, it is always a good idea to copy the data you gonna be working with into a new file. This way, you still have the file with original data and can return to it, in case you want to redo the changes.\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Changelog\"), \" - is the document, where we gonna write about all the changes in our dataset. Usually, it includes information as such:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Date of change\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Person, who made changes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Person, who approved changes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Data, file, component, or version that changed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Description of what changed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The reason why it was changed\")), mdx(\"p\", null, \"Basically, there are 2 ways to write a changelog:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create a text file and keep a record of changes;\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Auto-generate the changelog from commit messages through the console with a command:\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$ git log\")), mdx(\"p\", null, \"That way is very convenient, although is mostly used by developers, not data analysts.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"2a0370fa-295e-5b29-9712-077bfb644930","slug":"post10","__params":{"slug":"post10"}}},
    "staticQueryHashes": []}